# Rock-Paper-Scissors in C#

## Overview
This is a simple console-based Rock-Paper-Scissors game written in C#. It allows the user to play against the computer in multiple rounds, keeping track of wins, losses, and draws. The game continues until the user decides to quit.

This project serves as a stepping stone for learning C#, covering fundamental programming concepts such as:
- Random number generation (`Random` class)
- Loops (`while`, `do-while`)
- Conditional statements (`if-else`, `switch`)
- Arrays and string manipulation
- Console input and output

## Prerequisites
To run this program, you need:
- .NET SDK installed ([Download .NET](https://dotnet.microsoft.com/en-us/download))
- A code editor (e.g., Visual Studio Code, Visual Studio, or any text editor)

## Setup Instructions
1. **Clone or Download the Repository**
   ```sh
   git clone https://github.com/your-repository/rock-paper-scissors-csharp.git
   cd rock-paper-scissors-csharp
   ```

2. **Compile and Run the Program**
   - If using the command line, navigate to the project folder and run:
     ```sh
     dotnet run
     ```
   - If using Visual Studio, open the project and click "Run."

## How to Play
1. The program will prompt you to choose between Rock, Paper, or Scissors.
2. Type your choice and press Enter.
3. The computer will randomly select its move.
4. The result of the round will be displayed (Win, Lose, or Draw).
5. The game will ask if you want to play again (`y` for yes, `n` for no).
6. The final score is displayed when you quit the game.

## Learning Objectives
This project is an excellent introduction to C# programming and helps build confidence in:
- Writing structured code with loops and conditions.
- Handling user input and validating choices.
- Working with random values for game logic.
- Managing program flow using loops.

## Future Improvements
- Add a graphical user interface (GUI) using Windows Forms or WPF.
- Implement a scoring system with history saved to a file.
- Introduce more advanced C# concepts like object-oriented programming.

## Contributions
Feel free to fork this project and enhance its functionality! If you find any issues, submit a pull request or open an issue.

## License
This project is open-source and free to use. Modify and distribute as needed!

